#!/usr/bin/env python3
"""
Fetches updates for specified packages, files individual PRs for each modified
package
"""
import argparse
import subprocess
import sys

from pathlib import Path
from typing import Iterable, List


def run_git(args: List[str], capture_output: bool = False) -> subprocess.CompletedProcess:
    return subprocess.run(["git"] + args, check=True, capture_output=capture_output)


def get_modified_packages() -> Iterable[str]:
    proc = run_git(["status", "--porcelain"], capture_output=True)
    for line in proc.stdout.decode().splitlines():
        if line.startswith(" M "):
            path = line[3:]
            if path.endswith(".yaml"):
                yield path


def file_pr(package_file: str):
    path = Path(package_file)
    name = path.stem
    if name == "index":
        name = path.parent.name

    branch_name = f"update-{name}"
    try:
        run_git(["checkout", "-b", branch_name])
    except subprocess.CalledProcessError:
        print(f"Failed to create branch '{branch_name}', check it does not already exist")
        return
    run_git(["add", package_file])
    run_git(["commit", "-m", f"Update {name}"])
    run_git(["push", "-u", "origin", branch_name])
    subprocess.run(["gh", "pr", "create", "--fill"], check=True)
    subprocess.run(["gh", "pr", "merge", "--auto", "-dm"], check=True)
    run_git(["checkout", "-"])


def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter, description=__doc__
    )

    parser.add_argument(
        "-f",
        "--file",
        dest="filename",
        type=argparse.FileType("w", encoding="utf-8"),
        help="write report to FILE",
        metavar="FILE",
    )

    parser.add_argument(
        "--only-pr",
        action="store_true",
        help="Files PRs for modified packages, do not fetch updates",
    )

    parser.add_argument("-v", "--verbose", action="count", help="Be more verbose")

    parser.add_argument("package_files", nargs="+")

    args = parser.parse_args()

    if not args.only_pr:
        subprocess.run(["clydetools", "fetch"] + args.package_files, check=True)

    for package in get_modified_packages():
        print(f"Filing PR for {package}")
        file_pr(package)

    return 0


if __name__ == "__main__":
    sys.exit(main())
# vi: ts=4 sw=4 et
