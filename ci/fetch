#!/usr/bin/env python3
"""
Fetches updates for specified packages, files individual PRs for each modified
package.
"""
import argparse
import subprocess
import sys
from pathlib import Path
from tempfile import TemporaryDirectory
from typing import Iterable, List

from get_clyde import download_clyde, find_clyde_snapshot_url
from tui import progress, warning
from utils import is_package


def run_git(
    args: List[str], capture_output: bool = False
) -> subprocess.CompletedProcess:
    return subprocess.run(["git"] + args, check=True, capture_output=capture_output)


def get_modified_packages() -> Iterable[Path]:
    proc = run_git(["status", "--porcelain"], capture_output=True)
    for line in proc.stdout.decode().splitlines():
        if line.startswith(" M "):
            path = Path(line[3:])
            if is_package(path):
                yield path


def has_remote_branch(branch: str) -> bool:
    proc = run_git(
        ["branch", "--remote", "--list", f"origin/{branch}"], capture_output=True
    )
    return proc.stdout.strip() != b""


def file_pr(path: Path, base_branch: str):
    name = path.stem
    if name == "index":
        name = path.parent.name

    branch_name = f"update-{name}"
    already_exists = has_remote_branch(branch_name)
    if already_exists:
        warning(f"Branch {branch_name} already exists, overwriting it")
    run_git(["checkout", "-B", branch_name, base_branch])

    run_git(["add", str(path)])
    run_git(["commit", "-m", f"Update {name}"])

    # Push
    push_cmd = ["push", "-u", "origin", branch_name]
    if already_exists:
        push_cmd.append("--force-with-lease")
    run_git(push_cmd)

    # Open PR
    if not already_exists:
        subprocess.run(
            ["gh", "pr", "create", "--fill", "--base", base_branch], check=True
        )
        subprocess.run(["gh", "pr", "merge", "--auto", "-dm"], check=True)
    run_git(["checkout", "-"])


def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter, description=__doc__
    )

    parser.add_argument(
        "-f",
        "--file",
        dest="filename",
        type=argparse.FileType("w", encoding="utf-8"),
        help="write report to FILE",
        metavar="FILE",
    )

    parser.add_argument(
        "--next",
        action="store_true",
        help="Target 'next' instead of 'main'",
    )

    parser.add_argument(
        "--only-pr",
        action="store_true",
        help="Files PRs for modified packages, do not fetch updates",
    )

    parser.add_argument("-v", "--verbose", action="count", help="Be more verbose")

    parser.add_argument("package_files", nargs="+")

    args = parser.parse_args()

    if not args.only_pr:
        with TemporaryDirectory() as temp_dir:
            clyde_dir = Path(temp_dir) / "clyde"
            clyde_url = find_clyde_snapshot_url()
            download_clyde(clyde_url, clyde_dir)

            package_files = [Path(x).absolute() for x in args.package_files]
            subprocess.run(
                ["clydetools", "fetch"] + package_files, check=True, cwd=temp_dir
            )

    base_branch = "next" if args.next else "main"
    for package in get_modified_packages():
        progress(f"Filing PR for {package}")
        file_pr(package, base_branch)

    return 0


if __name__ == "__main__":
    sys.exit(main())
# vi: ts=4 sw=4 et
