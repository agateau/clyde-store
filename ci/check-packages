#!/usr/bin/env python3
"""
Check packages are valid
"""
import argparse
import random
import re
import subprocess
import sys

from pathlib import Path
from typing import List

from get_clyde import find_clyde_snapshot_url, find_clyde_release_url, download_clyde, GITHUB_TOKEN
from tui import eprint, progress
from utils import which

CI_DIR = Path(__file__).parent.resolve()
CLYDE_DIR = CI_DIR / "clyde"
ROOT_DIR = CI_DIR.parent.resolve()

RANDOM_COUNT = 8


def check_github_token() -> None:
    if not GITHUB_TOKEN:
        eprint("CLYDE_GITHUB_TOKEN environment variable not set. Consider defining it"
               " to avoid being rate-limited.")


def list_modified_files(target: str) -> List[Path]:
    cmd = ["git", "diff", "--raw", f"origin/{target}", "HEAD"]
    proc = subprocess.run(cmd, check=True, stdout=subprocess.PIPE)
    out = str(proc.stdout, "utf-8")
    lst = []
    for line in out.split("\n"):
        match = re.search("([A-Z]+)\\d*\t([^\\s]+)$", line)
        if match:
            status, path_str = match.groups()
            if status != "R":
                path = Path(path_str).resolve()
                lst.append(path)
    return lst


def has_ci_changed(paths: List[Path]) -> bool:
    return any(CI_DIR in x.parents for x in paths)


def list_all_packages() -> List[Path]:
    return list(ROOT_DIR.glob("*.yaml")) + list(ROOT_DIR.glob("*/index.yaml"))


def list_packages_to_check(target: str) -> List[Path]:
    progress("Listing packages to check")
    paths = list_modified_files(target)
    packages = [x for x in paths if x.suffix == ".yaml"]
    if has_ci_changed(paths):
        eprint(f"CI files have changed: adding a random selection of {RANDOM_COUNT} packages")
        all_packages = list_all_packages()
        candidates = list(set(all_packages) - set(packages))
        if len(candidates) <= RANDOM_COUNT:
            return all_packages
        packages.extend(random.sample(candidates, RANDOM_COUNT))
    return packages


def check_packages(packages: List[Path]) -> int:
    # We must run the test in the current directory for now
    package_names = [x.relative_to(ROOT_DIR) for x in packages]
    cmd = [which("clydetools"), "check"] + package_names
    proc = subprocess.run(cmd, cwd=ROOT_DIR)
    return proc.returncode


def main() -> int:
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=__doc__)

    parser.add_argument("target", choices=["main", "next"])
    parser.add_argument("-a", "--all", action="store_true")
    parser.add_argument("-d", "--dry-run", action="store_true")

    args = parser.parse_args()

    check_github_token()

    if args.all:
        packages = list_all_packages()
    else:
        packages = list_packages_to_check(args.target)
    packages = sorted(packages)

    eprint("Packages to check:")
    if not packages:
        eprint("None")
        return 0
    for package in packages:
        eprint(f"- {package.relative_to(ROOT_DIR)}")

    if args.dry_run:
        return 0

    if args.target == "main":
        clyde_url = find_clyde_release_url()
    else:
        clyde_url = find_clyde_snapshot_url()

    download_clyde(clyde_url, CLYDE_DIR)
    return check_packages(packages)

    return 0


if __name__ == "__main__":
    sys.exit(main())
# vi: ts=4 sw=4 et
